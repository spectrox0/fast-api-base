[tool.poetry]
name = "upwork-exam-v2"
version = "0.1.0"
description = "test-api"
authors = ["alejandro velazco <alejanvelazco2008@proton.me>"]
readme = "README.md"

[tool.poetry.scripts]
start = 'uvicorn app.main:app --host 0.0.0.0 --port 8000 --proxy-headers --reload'
test = "pytest"

[tool.poetry.dependencies]
python = "^3.11"
fastapi = "^0.109.0"
pytest = "^7.4.4"
black = "^23.12.1"
pydantic = "^2.5.3"
uvicorn = {extras = ["standard"], version = "^0.26.0"}
pydantic-settings = "^2.1.0"
sqlalchemy = "^2.0.25"
alembic = "^1.13.1"
asyncpg = "^0.29.0"


[tool.poetry.group.dev.dependencies]
ruff = "*"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


[tool.black]
line-length = 88
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.ruff]
line-length = 88
select = [
    "E",   # pycodestyle error
    "W",   # pycodestyle warning
    "F",   # pyflakes
    "A",   # flakes8-builtins
    "COM", # flakes8-commas
    "C4",  # flake8-comprehensions
    "Q",   # flake8-quotes
    "SIM", # flake8-simplify
    "PTH", # flake8-use-pathlib
    "I",   # isort
    "N",   # pep8 naming
    "UP",  # pyupgrade  
    "S",   # bandit
]

ignore = [
    "E501",  # line too long, handled by black
    "C901",  # too complex
]

[tool.ruff.isort]
order-by-type = true
relative-imports-order = "closest-to-furthest"
extra-standard-library = ["typing"]
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]
known-first-party = []